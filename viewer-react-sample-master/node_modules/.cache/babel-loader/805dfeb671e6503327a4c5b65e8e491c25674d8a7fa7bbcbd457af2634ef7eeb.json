{"ast":null,"code":"import { useVisibility } from '../context/VisibilityContext';\nclass HandleSelectionExtension extends Autodesk.Viewing.Extension {\n  constructor(viewer, options) {\n    super(viewer, options);\n    this._group = null;\n    this._button = null;\n    this._button2 = null;\n    this._data = null;\n  }\n  load() {\n    console.log('HandleSelectionExtension has been loaded');\n    return true;\n  }\n  unload() {\n    // Clean our UI elements if we added any\n    if (this._group) {\n      this._group.removeControl(this._button);\n      if (this._group.getNumberOfControls() === 0) {\n        this.viewer.toolbar.removeControl(this._group);\n      }\n    }\n    console.log('HandleSelectionExtension has been unloaded');\n    return true;\n  }\n  onToolbarCreated() {\n    var _s = $RefreshSig$();\n    // Create a new toolbar group if it doesn't exist\n    this._group = this.viewer.toolbar.getControl('allMyAwesomeExtensionsToolbar');\n    if (!this._group) {\n      this._group = new Autodesk.Viewing.UI.ControlGroup('allMyAwesomeExtensionsToolbar');\n      this.viewer.toolbar.addControl(this._group);\n    }\n    window.toggleTabVisibility = _s(() => {\n      _s();\n      const {\n        toggleVisibility\n      } = useVisibility(); // Esto puede no funcionar directamente ya que useVisibility necesita un componente de React\n      toggleVisibility();\n    }, \"VpeFbZ23fhDnZgGhewpTLpLURdw=\", false, function () {\n      return [useVisibility];\n    });\n    // Add a new button to the toolbar group\n    this._button = new Autodesk.Viewing.UI.Button('handleSelectionExtensionButton');\n    this._gestorVistasButton = new Autodesk.Viewing.UI.Button('gestorVistasButton');\n    this._button.onClick = ev => {\n      console.log(\"detecto click\");\n      window.dispatchEvent(new CustomEvent('toggleTabVisibility'));\n      const selection = this.viewer.getSelection();\n      // this.viewer.clearSelection();\n      // Anything selected?\n      if (selection.length > 0) {\n        let isolated = [];\n        // Iterate through the list of selected dbIds\n        selection.forEach(dbId => {\n          // Get properties of each dbId\n          this.viewer.getProperties(dbId, props => {\n            // Output properties to console\n            console.log(props);\n            // Ask if want to isolate\n            /*                         if (confirm(`Isolate ${props.name} (${props.externalId})?`)) {\r\n                                        isolated.push(dbId);\r\n                                        this.viewer.isolate(isolated);\r\n                                    } */\n            isolated.push(dbId);\n            this.viewer.isolate(isolated);\n          });\n        });\n      } else {\n        // If nothing selected, restore\n        this.viewer.isolate(0);\n      }\n    };\n    this._gestorVistasButton.onClick = ev => {\n      // Aquí puedes agregar la lógica que se ejecutará cuando se haga clic en el botón\n      console.log('Botón gestorVistas pulsado');\n    };\n    this._button.setToolTip('Funciones ICD');\n    let iconPath = \"images/isotipoTransparente.png\";\n    this._button.icon.style = `background-image: url(${iconPath}); background-size: 22px 22px;`;\n\n    // this._button.classList.add(\"fas\", \"fa-arrows-alt\");\n\n    //   this._button.addClass('handleSelectionExtensionIcon');\n    this._group.addControl(this._button);\n\n    //  this._button2.setToolTip('atBIM Button');\n    // this._button2.addClass('handleSelectionExtensionIcon');\n    //this._group.addControl(this._button2);\n  }\n\n  drawData() {\n    let _this = this;\n    console.log(this._data);\n    var div = document.getElementById('atbimPanel');\n    div.innerHTML = '<canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>';\n    var ctx = document.getElementById('myChart').getContext('2d');\n    let keys = Object.keys(this._data);\n    let values = Object.values(this._data).map(x => x.cantidad);\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: keys,\n        datasets: [{\n          label: 'Cantidad',\n          data: values,\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 2\n        }]\n      },\n      options: {\n        'onClick': function (evento, item) {\n          if (item[0] !== undefined) {\n            let label = item[0]._model.label;\n            let dbIds = _this._data[label].dbIds;\n            _this.viewer.isolate(dbIds);\n            _this.viewer.fitToView(dbIds, _this.viewer.model);\n          }\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n  }\n}\nAutodesk.Viewing.theExtensionManager.registerExtension('HandleSelectionExtension', HandleSelectionExtension);","map":{"version":3,"names":["useVisibility","HandleSelectionExtension","Autodesk","Viewing","Extension","constructor","viewer","options","_group","_button","_button2","_data","load","console","log","unload","removeControl","getNumberOfControls","toolbar","onToolbarCreated","getControl","UI","ControlGroup","addControl","window","toggleTabVisibility","toggleVisibility","Button","_gestorVistasButton","onClick","ev","dispatchEvent","CustomEvent","selection","getSelection","length","isolated","forEach","dbId","getProperties","props","push","isolate","setToolTip","iconPath","icon","style","drawData","_this","div","document","getElementById","innerHTML","ctx","getContext","keys","Object","values","map","x","cantidad","Chart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","evento","item","undefined","_model","dbIds","fitToView","model","scales","yAxes","ticks","beginAtZero","theExtensionManager","registerExtension"],"sources":["C:/Users/nicol/ProyectosWeb/icd/icd7/viewer-react-sample-master/src/extensions/HandleSelectionExtension.js"],"sourcesContent":["import { useVisibility } from '../context/VisibilityContext';\r\n\r\nclass HandleSelectionExtension extends Autodesk.Viewing.Extension {\r\n    constructor(viewer, options) {\r\n        super(viewer, options);\r\n        this._group = null;\r\n        this._button = null;\r\n        this._button2 = null;\r\n        this._data = null;\r\n    }\r\n\r\n    load() {\r\n        console.log('HandleSelectionExtension has been loaded');\r\n        return true;\r\n    }\r\n\r\n    unload() {\r\n        // Clean our UI elements if we added any\r\n        if (this._group) {\r\n            this._group.removeControl(this._button);\r\n            if (this._group.getNumberOfControls() === 0) {\r\n                this.viewer.toolbar.removeControl(this._group);\r\n            }\r\n        }\r\n        console.log('HandleSelectionExtension has been unloaded');\r\n        return true;\r\n    }\r\n\r\n    onToolbarCreated() {\r\n        // Create a new toolbar group if it doesn't exist\r\n        this._group = this.viewer.toolbar.getControl('allMyAwesomeExtensionsToolbar');\r\n        if (!this._group) {\r\n            this._group = new Autodesk.Viewing.UI.ControlGroup('allMyAwesomeExtensionsToolbar');\r\n            this.viewer.toolbar.addControl(this._group);\r\n        }\r\n        window.toggleTabVisibility = () => {\r\n            const { toggleVisibility } = useVisibility(); // Esto puede no funcionar directamente ya que useVisibility necesita un componente de React\r\n            toggleVisibility();\r\n        };\r\n        // Add a new button to the toolbar group\r\n        this._button = new Autodesk.Viewing.UI.Button('handleSelectionExtensionButton');\r\n        this._gestorVistasButton = new Autodesk.Viewing.UI.Button('gestorVistasButton');\r\n        this._button.onClick = (ev) => {\r\n           console.log(\"detecto click\");\r\n           window.dispatchEvent(new CustomEvent('toggleTabVisibility'));\r\n      \r\n            const selection = this.viewer.getSelection();\r\n           // this.viewer.clearSelection();\r\n            // Anything selected?\r\n            if (selection.length > 0) {\r\n                let isolated = [];\r\n                // Iterate through the list of selected dbIds\r\n                selection.forEach((dbId) => {\r\n                    // Get properties of each dbId\r\n                    this.viewer.getProperties(dbId, (props) => {\r\n                        // Output properties to console\r\n                        console.log(props);\r\n                        // Ask if want to isolate\r\n/*                         if (confirm(`Isolate ${props.name} (${props.externalId})?`)) {\r\n                            isolated.push(dbId);\r\n                            this.viewer.isolate(isolated);\r\n                        } */\r\n                        isolated.push(dbId);\r\n                        this.viewer.isolate(isolated);\r\n                    });\r\n                });\r\n            } else {\r\n                // If nothing selected, restore\r\n                this.viewer.isolate(0);\r\n            }\r\n        };\r\n\r\n        this._gestorVistasButton.onClick = (ev) => {\r\n            // Aquí puedes agregar la lógica que se ejecutará cuando se haga clic en el botón\r\n            console.log('Botón gestorVistas pulsado');\r\n        };\r\n        this._button.setToolTip('Funciones ICD');\r\n        let iconPath = \"images/isotipoTransparente.png\";\r\n        this._button.icon.style = `background-image: url(${iconPath}); background-size: 22px 22px;`;\r\n        \r\n        \r\n      \r\n       // this._button.classList.add(\"fas\", \"fa-arrows-alt\");\r\n       \r\n     //   this._button.addClass('handleSelectionExtensionIcon');\r\n        this._group.addControl(this._button);\r\n\r\n    \r\n      //  this._button2.setToolTip('atBIM Button');\r\n       // this._button2.addClass('handleSelectionExtensionIcon');\r\n        //this._group.addControl(this._button2);\r\n    }\r\n\r\n    drawData() {\r\n        let _this = this;\r\n        console.log(this._data);\r\n        var div = document.getElementById('atbimPanel');\r\n        div.innerHTML = '<canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>';\r\n        var ctx = document.getElementById('myChart').getContext('2d');\r\n        let keys = Object.keys(this._data);\r\n        let values = Object.values(this._data).map(x => x.cantidad);\r\n        new Chart(ctx, {\r\n            type: 'bar',\r\n            data: {\r\n                labels: keys,\r\n                datasets: [{\r\n                    label: 'Cantidad',\r\n                    data: values,\r\n                    backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                    borderColor: 'rgba(255, 99, 132, 1)',\r\n                    borderWidth: 2\r\n                }]\r\n            },\r\n            options: {\r\n                'onClick': function(evento, item) {\r\n                 \r\n                    if (item[0] !== undefined) {\r\n                        let label = item[0]._model.label;\r\n                        let dbIds = _this._data[label].dbIds;                        \r\n                        _this.viewer.isolate(dbIds);\r\n                        _this.viewer.fitToView(dbIds, _this.viewer.model);\r\n                    }\r\n                },\r\n                scales: {\r\n                    yAxes: [{\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nAutodesk.Viewing.theExtensionManager.registerExtension('HandleSelectionExtension', HandleSelectionExtension);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}